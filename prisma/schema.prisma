generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  createdAt    DateTime      @default(now())
  role         Role          @default(USER)
  adminRefID   Int?
  phoneNumber  String?
  profileImage String?
  username     String
  blocked      Boolean       @default(false)
  Company      Company[]
  Payment      Payment[]
  Subscription Subscription?
  admin        User?         @relation("AdminToUsers", fields: [adminRefID], references: [id])
  subUsers     User[]        @relation("AdminToUsers")
  Pairings     Pairing[]
  SqliteFiles  SqliteFile[]
}

model Subscription {
  id            Int       @id @default(autoincrement())
  startDate     DateTime
  endDate       DateTime
  isActive      Boolean
  paymentMethod String
  userID        Int       @unique
  Payment       Payment[]
  user          User      @relation(fields: [userID], references: [id])
}

model Payment {
  id             Int          @id @default(autoincrement())
  amount         Float
  status         String
  date           DateTime     @default(now())
  subscriptionID Int
  userID         Int
  subscription   Subscription @relation(fields: [subscriptionID], references: [id])
  user           User         @relation(fields: [userID], references: [id])
}

model Company {
  id          Int      @id @default(autoincrement())
  name        String
  address     String
  createdAt   DateTime @default(now())
  userID      Int
  invoices    Json?
  sales       Json?
  purchases   Json?
  receivables Json?
  payables    Json?
  user        User     @relation(fields: [userID], references: [id])
}

enum Role {
  USER
  ADMIN
  OWNER
}

model Pairing {
  id              Int       @id @default(autoincrement())
  userID          Int
  desktopClientId String?
  code            String    @unique
  expiresAt       DateTime
  isActive        Boolean   @default(false)
  lastSyncedAt    DateTime?
  createdAt       DateTime  @default(now())
  user            User      @relation(fields: [userID], references: [id])
}

model SqliteFile {
  id              Int       @id @default(autoincrement())
  userID          Int       @unique
  storageProvider String
  remoteUrl       String
  localPath       String?
  checksum        String?
  lastSyncedAt    DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userID], references: [id])
}
